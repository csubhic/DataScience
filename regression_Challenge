{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"regression_Challenge","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPI9KjVcAkUdOqoG9AOdC4V"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"gY5z6ZcN008o","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":71},"executionInfo":{"status":"ok","timestamp":1594017154596,"user_tz":420,"elapsed":1254,"user":{"displayName":"Subbu DS","photoUrl":"","userId":"02220884204204123583"}},"outputId":"9279edaa-884c-444e-eac3-cc76d3978065"},"source":["import numpy as np\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","from sqlalchemy import create_engine\n","from sklearn.model_selection import train_test_split, cross_val_score\n","from sklearn.metrics import mean_absolute_error\n","from statsmodels.tools.eval_measures import mse, rmse\n","from sklearn.linear_model import LinearRegression, LassoCV, RidgeCV, ElasticNetCV\n","\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","postgres_user = 'dsbc_student'\n","postgres_pw = '7*.8G9QH21'\n","postgres_host = '142.93.121.174'\n","postgres_port = '5432'\n","postgres_db = 'houseprices'"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"FY0bgzu404v7","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1594018180851,"user_tz":420,"elapsed":2222,"user":{"displayName":"Subbu DS","photoUrl":"","userId":"02220884204204123583"}},"outputId":"6d3f4b8c-2c8c-4a74-ca8b-ccb5a5c8512e"},"source":["engine = create_engine('postgresql://{}:{}@{}:{}/{}'.format(\n","    postgres_user, postgres_pw, postgres_host, postgres_port, postgres_db))\n","house_prices_df = pd.read_sql_query('select * from houseprices',con=engine)\n","\n","# no need for an open connection, as we're only doing a single query\n","engine.dispose()\n","\n","house_prices_df.info()\n","\n","nonnumeric_columns = house_prices_df.select_dtypes(['object']).columns\n","print(nonnumeric_columns)\n","print(\"Number of non-numeric columns is {}\".format(len(nonnumeric_columns)))\n","\n","\n","total_missing = house_prices_df.isnull().sum().sort_values(ascending=False)\n","percent_missing = (house_prices_df.isnull().sum()/house_prices_df.isnull().count()).sort_values(ascending=False)\n","missing_data = pd.concat([total_missing,percent_missing], axis=1, keys=['Total', 'Percent'])\n","missing_data.head(10)\n"],"execution_count":14,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 1460 entries, 0 to 1459\n","Data columns (total 81 columns):\n"," #   Column         Non-Null Count  Dtype  \n","---  ------         --------------  -----  \n"," 0   id             1460 non-null   int64  \n"," 1   mssubclass     1460 non-null   int64  \n"," 2   mszoning       1460 non-null   object \n"," 3   lotfrontage    1201 non-null   float64\n"," 4   lotarea        1460 non-null   int64  \n"," 5   street         1460 non-null   object \n"," 6   alley          91 non-null     object \n"," 7   lotshape       1460 non-null   object \n"," 8   landcontour    1460 non-null   object \n"," 9   utilities      1460 non-null   object \n"," 10  lotconfig      1460 non-null   object \n"," 11  landslope      1460 non-null   object \n"," 12  neighborhood   1460 non-null   object \n"," 13  condition1     1460 non-null   object \n"," 14  condition2     1460 non-null   object \n"," 15  bldgtype       1460 non-null   object \n"," 16  housestyle     1460 non-null   object \n"," 17  overallqual    1460 non-null   int64  \n"," 18  overallcond    1460 non-null   int64  \n"," 19  yearbuilt      1460 non-null   int64  \n"," 20  yearremodadd   1460 non-null   int64  \n"," 21  roofstyle      1460 non-null   object \n"," 22  roofmatl       1460 non-null   object \n"," 23  exterior1st    1460 non-null   object \n"," 24  exterior2nd    1460 non-null   object \n"," 25  masvnrtype     1452 non-null   object \n"," 26  masvnrarea     1452 non-null   float64\n"," 27  exterqual      1460 non-null   object \n"," 28  extercond      1460 non-null   object \n"," 29  foundation     1460 non-null   object \n"," 30  bsmtqual       1423 non-null   object \n"," 31  bsmtcond       1423 non-null   object \n"," 32  bsmtexposure   1422 non-null   object \n"," 33  bsmtfintype1   1423 non-null   object \n"," 34  bsmtfinsf1     1460 non-null   int64  \n"," 35  bsmtfintype2   1422 non-null   object \n"," 36  bsmtfinsf2     1460 non-null   int64  \n"," 37  bsmtunfsf      1460 non-null   int64  \n"," 38  totalbsmtsf    1460 non-null   int64  \n"," 39  heating        1460 non-null   object \n"," 40  heatingqc      1460 non-null   object \n"," 41  centralair     1460 non-null   object \n"," 42  electrical     1459 non-null   object \n"," 43  firstflrsf     1460 non-null   int64  \n"," 44  secondflrsf    1460 non-null   int64  \n"," 45  lowqualfinsf   1460 non-null   int64  \n"," 46  grlivarea      1460 non-null   int64  \n"," 47  bsmtfullbath   1460 non-null   int64  \n"," 48  bsmthalfbath   1460 non-null   int64  \n"," 49  fullbath       1460 non-null   int64  \n"," 50  halfbath       1460 non-null   int64  \n"," 51  bedroomabvgr   1460 non-null   int64  \n"," 52  kitchenabvgr   1460 non-null   int64  \n"," 53  kitchenqual    1460 non-null   object \n"," 54  totrmsabvgrd   1460 non-null   int64  \n"," 55  functional     1460 non-null   object \n"," 56  fireplaces     1460 non-null   int64  \n"," 57  fireplacequ    770 non-null    object \n"," 58  garagetype     1379 non-null   object \n"," 59  garageyrblt    1379 non-null   float64\n"," 60  garagefinish   1379 non-null   object \n"," 61  garagecars     1460 non-null   int64  \n"," 62  garagearea     1460 non-null   int64  \n"," 63  garagequal     1379 non-null   object \n"," 64  garagecond     1379 non-null   object \n"," 65  paveddrive     1460 non-null   object \n"," 66  wooddecksf     1460 non-null   int64  \n"," 67  openporchsf    1460 non-null   int64  \n"," 68  enclosedporch  1460 non-null   int64  \n"," 69  threessnporch  1460 non-null   int64  \n"," 70  screenporch    1460 non-null   int64  \n"," 71  poolarea       1460 non-null   int64  \n"," 72  poolqc         7 non-null      object \n"," 73  fence          281 non-null    object \n"," 74  miscfeature    54 non-null     object \n"," 75  miscval        1460 non-null   int64  \n"," 76  mosold         1460 non-null   int64  \n"," 77  yrsold         1460 non-null   int64  \n"," 78  saletype       1460 non-null   object \n"," 79  salecondition  1460 non-null   object \n"," 80  saleprice      1460 non-null   int64  \n","dtypes: float64(3), int64(35), object(43)\n","memory usage: 924.0+ KB\n","Index(['mszoning', 'street', 'alley', 'lotshape', 'landcontour', 'utilities',\n","       'lotconfig', 'landslope', 'neighborhood', 'condition1', 'condition2',\n","       'bldgtype', 'housestyle', 'roofstyle', 'roofmatl', 'exterior1st',\n","       'exterior2nd', 'masvnrtype', 'exterqual', 'extercond', 'foundation',\n","       'bsmtqual', 'bsmtcond', 'bsmtexposure', 'bsmtfintype1', 'bsmtfintype2',\n","       'heating', 'heatingqc', 'centralair', 'electrical', 'kitchenqual',\n","       'functional', 'fireplacequ', 'garagetype', 'garagefinish', 'garagequal',\n","       'garagecond', 'paveddrive', 'poolqc', 'fence', 'miscfeature',\n","       'saletype', 'salecondition'],\n","      dtype='object')\n","Number of non-numeric columns is 43\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Total</th>\n","      <th>Percent</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>poolqc</th>\n","      <td>1453</td>\n","      <td>0.995205</td>\n","    </tr>\n","    <tr>\n","      <th>miscfeature</th>\n","      <td>1406</td>\n","      <td>0.963014</td>\n","    </tr>\n","    <tr>\n","      <th>alley</th>\n","      <td>1369</td>\n","      <td>0.937671</td>\n","    </tr>\n","    <tr>\n","      <th>fence</th>\n","      <td>1179</td>\n","      <td>0.807534</td>\n","    </tr>\n","    <tr>\n","      <th>fireplacequ</th>\n","      <td>690</td>\n","      <td>0.472603</td>\n","    </tr>\n","    <tr>\n","      <th>lotfrontage</th>\n","      <td>259</td>\n","      <td>0.177397</td>\n","    </tr>\n","    <tr>\n","      <th>garagecond</th>\n","      <td>81</td>\n","      <td>0.055479</td>\n","    </tr>\n","    <tr>\n","      <th>garagetype</th>\n","      <td>81</td>\n","      <td>0.055479</td>\n","    </tr>\n","    <tr>\n","      <th>garageyrblt</th>\n","      <td>81</td>\n","      <td>0.055479</td>\n","    </tr>\n","    <tr>\n","      <th>garagefinish</th>\n","      <td>81</td>\n","      <td>0.055479</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["              Total   Percent\n","poolqc         1453  0.995205\n","miscfeature    1406  0.963014\n","alley          1369  0.937671\n","fence          1179  0.807534\n","fireplacequ     690  0.472603\n","lotfrontage     259  0.177397\n","garagecond       81  0.055479\n","garagetype       81  0.055479\n","garageyrblt      81  0.055479\n","garagefinish     81  0.055479"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"Kg4Loj3A069B","colab_type":"code","colab":{}},"source":["house_prices_df = pd.concat([house_prices_df,pd.get_dummies(house_prices_df.mszoning, prefix=\"mszoning\", drop_first=True)], axis=1)\n","house_prices_df = pd.concat([house_prices_df,pd.get_dummies(house_prices_df.street, prefix=\"street\", drop_first=True)], axis=1)\n","dummy_column_names = list(pd.get_dummies(house_prices_df.mszoning, prefix=\"mszoning\", drop_first=True).columns)\n","dummy_column_names = dummy_column_names + list(pd.get_dummies(house_prices_df.street, prefix=\"street\", drop_first=True).columns)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"AkFxea231ACn","colab_type":"code","colab":{}},"source":["\n","house_prices_df['totalsf'] = house_prices_df['totalbsmtsf'] + house_prices_df['firstflrsf'] + house_prices_df['secondflrsf']\n","\n","house_prices_df['int_over_sf'] = house_prices_df['totalsf'] * house_prices_df['overallqual']\n","\n","# Y is the target variable\n","Y = np.log1p(house_prices_df['saleprice'])\n","# X is the feature set\n","X = house_prices_df[['overallqual', 'grlivarea', 'garagecars', 'garagearea', 'totalsf', 'int_over_sf'] + dummy_column_names]\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size = 0.2, random_state = 465)\n","\n","alphas = [np.power(10.0,p) for p in np.arange(-10,40,1)]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dSuTYyhC1CzA","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":136},"executionInfo":{"status":"ok","timestamp":1594017207601,"user_tz":420,"elapsed":550,"user":{"displayName":"Subbu DS","photoUrl":"","userId":"02220884204204123583"}},"outputId":"0550df19-aa6d-46ed-d8ff-754b05809bbc"},"source":["lrm = LinearRegression()\n","\n","lrm.fit(X_train, y_train)\n","\n","# We are making predictions here\n","y_preds_train = lrm.predict(X_train)\n","y_preds_test = lrm.predict(X_test)\n","\n","print(\"R-squared of the model in training set is: {}\".format(lrm.score(X_train, y_train)))\n","print(\"-----Test set statistics-----\")\n","print(\"R-squared of the model in test set is: {}\".format(lrm.score(X_test, y_test)))\n","print(\"Mean absolute error of the prediction is: {}\".format(mean_absolute_error(y_test, y_preds_test)))\n","print(\"Mean squared error of the prediction is: {}\".format(mse(y_test, y_preds_test)))\n","print(\"Root mean squared error of the prediction is: {}\".format(rmse(y_test, y_preds_test)))\n","print(\"Mean absolute percentage error of the prediction is: {}\".format(np.mean(np.abs((y_test - y_preds_test) / y_test)) * 100))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["R-squared of the model in training set is: 0.8321322553132751\n","-----Test set statistics-----\n","R-squared of the model in test set is: 0.8249302330916467\n","Mean absolute error of the prediction is: 0.12570372872861488\n","Mean squared error of the prediction is: 0.029192121871356388\n","Root mean squared error of the prediction is: 0.17085702172095937\n","Mean absolute percentage error of the prediction is: 1.0503577667823571\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rg9Z0zzF1F1l","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":153},"executionInfo":{"status":"ok","timestamp":1594017212515,"user_tz":420,"elapsed":440,"user":{"displayName":"Subbu DS","photoUrl":"","userId":"02220884204204123583"}},"outputId":"b851104e-56ce-4e39-9fc7-3e0bff7c9a2d"},"source":["lasso_cv = LassoCV(alphas=alphas, cv=5)\n","\n","lasso_cv.fit(X_train, y_train)\n","\n","# We are making predictions here\n","y_preds_train = lasso_cv.predict(X_train)\n","y_preds_test = lasso_cv.predict(X_test)\n","\n","print(\"Best alpha value is: {}\".format(lasso_cv.alpha_))\n","print(\"R-squared of the model in training set is: {}\".format(lasso_cv.score(X_train, y_train)))\n","print(\"-----Test set statistics-----\")\n","print(\"R-squared of the model in test set is: {}\".format(lasso_cv.score(X_test, y_test)))\n","print(\"Mean absolute error of the prediction is: {}\".format(mean_absolute_error(y_test, y_preds_test)))\n","print(\"Mean squared error of the prediction is: {}\".format(mse(y_test, y_preds_test)))\n","print(\"Root mean squared error of the prediction is: {}\".format(rmse(y_test, y_preds_test)))\n","print(\"Mean absolute percentage error of the prediction is: {}\".format(np.mean(np.abs((y_test - y_preds_test) / y_test)) * 100))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Best alpha value is: 0.0001\n","R-squared of the model in training set is: 0.831939428704242\n","-----Test set statistics-----\n","R-squared of the model in test set is: 0.8226434437869413\n","Mean absolute error of the prediction is: 0.12624310826908405\n","Mean squared error of the prediction is: 0.029573434037677006\n","Root mean squared error of the prediction is: 0.17196928225028157\n","Mean absolute percentage error of the prediction is: 1.055235494657774\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"N0qKEXkQ1JJJ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":153},"executionInfo":{"status":"ok","timestamp":1594017227143,"user_tz":420,"elapsed":1835,"user":{"displayName":"Subbu DS","photoUrl":"","userId":"02220884204204123583"}},"outputId":"23a93dc4-aa37-4718-eac1-74bd2f881cfd"},"source":["ridge_cv = RidgeCV(alphas=alphas, cv=5)\n","\n","ridge_cv.fit(X_train, y_train)\n","\n","# We are making predictions here\n","y_preds_train = ridge_cv.predict(X_train)\n","y_preds_test = ridge_cv.predict(X_test)\n","\n","print(\"Best alpha value is: {}\".format(ridge_cv.alpha_))\n","print(\"R-squared of the model in training set is: {}\".format(ridge_cv.score(X_train, y_train)))\n","print(\"-----Test set statistics-----\")\n","print(\"R-squared of the model in test set is: {}\".format(ridge_cv.score(X_test, y_test)))\n","print(\"Mean absolute error of the prediction is: {}\".format(mean_absolute_error(y_test, y_preds_test)))\n","print(\"Mean squared error of the prediction is: {}\".format(mse(y_test, y_preds_test)))\n","print(\"Root mean squared error of the prediction is: {}\".format(rmse(y_test, y_preds_test)))\n","print(\"Mean absolute percentage error of the prediction is: {}\".format(np.mean(np.abs((y_test - y_preds_test) / y_test)) * 100))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Best alpha value is: 1.0\n","R-squared of the model in training set is: 0.8316364867222638\n","-----Test set statistics-----\n","R-squared of the model in test set is: 0.8203050076234291\n","Mean absolute error of the prediction is: 0.12673637339741028\n","Mean squared error of the prediction is: 0.029963358092978763\n","Root mean squared error of the prediction is: 0.1730992723640939\n","Mean absolute percentage error of the prediction is: 1.0596941230310641\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ccNXboVy1NOQ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":153},"executionInfo":{"status":"ok","timestamp":1594017242428,"user_tz":420,"elapsed":393,"user":{"displayName":"Subbu DS","photoUrl":"","userId":"02220884204204123583"}},"outputId":"0844baea-2b28-4468-c2f1-d486fcd5cfe6"},"source":["elasticnet_cv = ElasticNetCV(alphas=alphas, cv=5)\n","\n","elasticnet_cv.fit(X_train, y_train)\n","\n","# We are making predictions here\n","y_preds_train = elasticnet_cv.predict(X_train)\n","y_preds_test = elasticnet_cv.predict(X_test)\n","\n","print(\"Best alpha value is: {}\".format(elasticnet_cv.alpha_))\n","print(\"R-squared of the model in training set is: {}\".format(elasticnet_cv.score(X_train, y_train)))\n","print(\"-----Test set statistics-----\")\n","print(\"R-squared of the model in test set is: {}\".format(elasticnet_cv.score(X_test, y_test)))\n","print(\"Mean absolute error of the prediction is: {}\".format(mean_absolute_error(y_test, y_preds_test)))\n","print(\"Mean squared error of the prediction is: {}\".format(mse(y_test, y_preds_test)))\n","print(\"Root mean squared error of the prediction is: {}\".format(rmse(y_test, y_preds_test)))\n","print(\"Mean absolute percentage error of the prediction is: {}\".format(np.mean(np.abs((y_test - y_preds_test) / y_test)) * 100))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Best alpha value is: 0.001\n","R-squared of the model in training set is: 0.8299654806803803\n","-----Test set statistics-----\n","R-squared of the model in test set is: 0.8149185869526184\n","Mean absolute error of the prediction is: 0.12770726087011364\n","Mean squared error of the prediction is: 0.030861520302533838\n","Root mean squared error of the prediction is: 0.17567447254092963\n","Mean absolute percentage error of the prediction is: 1.0685444897303111\n"],"name":"stdout"}]}]}